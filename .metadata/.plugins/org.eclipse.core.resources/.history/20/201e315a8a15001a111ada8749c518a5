import java.io.File;
import java.io.IOException;

import com.ibm.wala.ipa.callgraph.AnalysisOptions;
import com.ibm.wala.ipa.callgraph.AnalysisOptions.ReflectionOptions;
import com.ibm.wala.ipa.callgraph.AnalysisScope;
import com.ibm.wala.ipa.callgraph.CallGraph;
import com.ibm.wala.ipa.callgraph.CallGraphBuilder;
import com.ibm.wala.ipa.callgraph.Entrypoint;
import com.ibm.wala.ipa.callgraph.impl.Util;
import com.ibm.wala.ipa.callgraph.propagation.InstanceKey;
import com.ibm.wala.ipa.cha.ClassHierarchy;
import com.ibm.wala.ipa.cha.ClassHierarchyException;
import com.ibm.wala.ipa.cha.ClassHierarchyFactory;
import com.ibm.wala.shrikeCT.InvalidClassFileException;
import com.ibm.wala.util.CancelException;
import com.ibm.wala.util.config.AnalysisScopeReader;
import com.ibm.wala.util.io.FileProvider;

public class SDGCreateTest {
	public static void main(String args[]) throws IOException, ClassHierarchyException, IllegalArgumentException, InvalidClassFileException, CancelException {

	    // 获得一个文件

	    File exFile=new FileProvider().getFile("Java60RegressionExclusions.txt");

	    // 将分析域存到文件中

	    AnalysisScope scope =
	        AnalysisScopeReader.makeJavaBinaryAnalysisScope(
	            "E:\\eclipse-workspace\\jlu", exFile);

	        // 构建ClassHierarchy，相当与类的一个层级结构

	         ClassHierarchy cha = ClassHierarchyFactory.make(scope);
	         
	         
	         Iterable<Entrypoint> entrypoints =Util.makeMainEntrypoints(scope, cha);
	         AnalysisOptions options = new AnalysisOptions(scope, entrypoints);
	         options.setReflectionOptions(ReflectionOptions.NONE);
	        
	         CallGraphBuilder<InstanceKey> builder = Util.makeVanillaZeroOneCFABuilder(options, new AnalysisCacheImpl(), cha, scope);

	         CallGraph cg = builder.makeCallGraph(options, null);
	         
}
